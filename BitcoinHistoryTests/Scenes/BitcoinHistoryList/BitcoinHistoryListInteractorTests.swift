//
//  BitcoinHistoryListInteractorTests.swift
//  bitcoin-history
//
//  Created by Josep Bordes Jové on 30/11/2019.
//  Copyright (c) 2019 Josep Bordes Jové. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import Bitcoin_History
import XCTest
import BHKit

class BitcoinHistoryListInteractorTests: XCTestCase {
  // MARK: Subject under test
  
  var sut: BitcoinHistoryListInteractor!
  
  // MARK: Test lifecycle
  
  override func setUp() {
    super.setUp()
    setupBitcoinHistoryListInteractor()
  }
  
  override func tearDown() {
    super.tearDown()
  }
  
  // MARK: Test setup
  
  func setupBitcoinHistoryListInteractor() {
    sut = BitcoinHistoryListInteractor(store: MemStore())
  }
  
  // MARK: Test doubles
  
  class BitcoinHistoryListPresentationLogicSpy: BitcoinHistoryListPresentationLogic {
    var presentViewCalled = false
    var presentStartUpdatingTodayRateCalled = false
    var presentStopUpdatingTodayRateCalled = false
    var presentForceUpdateTodaysRateCalled = false
    
    func presentView(response: BitcoinHistoryList.PrepareView.Response) {
      presentViewCalled = true
    }
    
    func presentStartUpdatingTodayRate(response: BitcoinHistoryList.StartUpdatingForPrice.Response) {
      presentStartUpdatingTodayRateCalled = true
    }
    
    func presentStopUpdatingTodayRate(response: BitcoinHistoryList.StopUpdatingForPrice.Response) {
      presentStopUpdatingTodayRateCalled = true
    }
    
    func presentForceUpdateTodaysRate(response: BitcoinHistoryList.ForceUpdateTodaysRate.Response) {
      presentForceUpdateTodaysRateCalled = true
    }
  }
  
  // MARK: Tests
  
  func testPrepareView() {
    // Given
    let spy = BitcoinHistoryListPresentationLogicSpy()
    sut.presenter = spy
    let request = BitcoinHistoryList.PrepareView.Request()
    
    // When
    sut.prepareView(request: request)
    
    // Then
    XCTAssertTrue(spy.presentViewCalled, "prepareView(request:) should ask the presenter to format the result")
  }
  
  func testStartUpdatingTodayRate() {
    // Given
    let spy = BitcoinHistoryListPresentationLogicSpy()
    sut.presenter = spy
    let response = BitcoinHistoryList.StartUpdatingForPrice.Response(historicalList: RateList.fake, todayRate: RateList.fake, error: nil)

    // When
    sut.presenter?.presentStartUpdatingTodayRate(response: response)
    
    // Then
    XCTAssertTrue(spy.presentStartUpdatingTodayRateCalled, "presentStartUpdatingTodayRate(request:) should ask the presenter to format the result")
  }
  
  func testForceUpdateTodaysRate() {
    // Given
    let spy = BitcoinHistoryListPresentationLogicSpy()
    sut.presenter = spy
    let response = BitcoinHistoryList.ForceUpdateTodaysRate.Response(historicalList: RateList.fake, todayRate: RateList.fake, error: nil)

    // When
    sut.presenter?.presentForceUpdateTodaysRate(response: response)
    
    // Then
    XCTAssertTrue(spy.presentForceUpdateTodaysRateCalled, "presentForceUpdateTodaysRate(request:) should ask the presenter to format the result")
  }
}
