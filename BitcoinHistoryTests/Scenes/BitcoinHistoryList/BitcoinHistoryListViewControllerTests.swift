//
//  BitcoinHistoryListViewControllerTests.swift
//  bitcoin-history
//
//  Created by Josep Bordes Jové on 30/11/2019.
//  Copyright (c) 2019 Josep Bordes Jové. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import Bitcoin_History
import XCTest
import BHKit

class BitcoinHistoryListViewControllerTests: XCTestCase {
  // MARK: Subject under test
  
  var sut: BitcoinHistoryListViewController!
  var window: UIWindow!
  
  // MARK: Test lifecycle
  
  override func setUp() {
    super.setUp()
    window = UIWindow()
    setupBitcoinHistoryListViewController()
  }
  
  override func tearDown() {
    window = nil
    super.tearDown()
  }
  
  // MARK: Test setup
  
  func setupBitcoinHistoryListViewController() {
    sut = BitcoinHistoryListViewController(store: MemStore())
  }
  
  func loadView() {
    window.addSubview(sut.view)
    RunLoop.current.run(until: Date())
  }
  
  // MARK: Test doubless
  
  class BitcoinHistoryListBusinessLogicSpy: BitcoinHistoryListBusinessLogic {
    var prepareViewCalled = false
    var startUpdatingTodayRateCalled = false
    var stopUpdatingTodayRateCalled = false
    var forceUpdateTodaysRateCalled = false
    
    func prepareView(request: BitcoinHistoryList.PrepareView.Request) {
      prepareViewCalled = true
    }
    
    func startUpdatingTodayRate(request: BitcoinHistoryList.StartUpdatingForPrice.Request) {
      startUpdatingTodayRateCalled = true
    }
    
    func stopUpdatingTodayRate(request: BitcoinHistoryList.StopUpdatingForPrice.Request) {
      stopUpdatingTodayRateCalled = true
    }
    
    func forceUpdateTodaysRate(request: BitcoinHistoryList.ForceUpdateTodaysRate.Request) {
      forceUpdateTodaysRateCalled = true
    }
  }

  class BitcoinHistoryListRouterSpy: NSObject, BitcoinHistoryListRoutingLogic, BitcoinHistoryListDataPassing {
    var dataStore: BitcoinHistoryListDataStore?

    var routeToInfoDisclaimerCalled = false
    var routeToBitcoinRateDetailCalled = false
    var updateDataToBitcoinRateDetailIfPresentedCalled = false
    
    func routeToInfoDisclaimer() {
      routeToInfoDisclaimerCalled = true
    }
    
    func routeToBitcoinRateDetail() {
      routeToBitcoinRateDetailCalled = true
    }
    
    func updateDataToBitcoinRateDetailIfPresented() {
      updateDataToBitcoinRateDetailIfPresentedCalled = true
    }
  }

  // MARK: Tests
  
  func testShouldPrepareViewWhenViewIsLoaded() {
    // Given
    let spy = BitcoinHistoryListBusinessLogicSpy()
    sut.interactor = spy
    
    // When
    loadView()
    
    // Then
    XCTAssertTrue(spy.prepareViewCalled, "viewDidLoad() should ask the interactor to prepare the views")
  }
  
  func testDisplayAndUpdateView() {
    // Given
    let spy = BitcoinHistoryListBusinessLogicSpy()
    sut.interactor = spy
    let sections: [BitconHistorySection] = [.today(detail: RateList.fake)]
    let viewModel = BitcoinHistoryList.PrepareView.ViewModel(result: .success(sections))
    
    // When
    loadView()
    sut.displayView(viewModel: viewModel)
    
    // Then
    XCTAssert(spy.startUpdatingTodayRateCalled, "After the view has been displayed, start listening for today's rate updates")
    XCTAssertEqual(sut.tableView.numberOfSections, sections.count, "The sections amount with a success block has to be the same as the table")
    
    // Given
    let sectionsUpdated: [BitconHistorySection] = [.today(detail: RateList.fake), .historic(list: RateList.fake)]
    let startListenViewModel = BitcoinHistoryList.StartUpdatingForPrice.ViewModel(result: .success(sectionsUpdated))
    
    // When
    sut.displayStartUpdatingTodayRate(viewModel: startListenViewModel)
    
    // Then
    XCTAssertEqual(sut.tableView.numberOfSections, sectionsUpdated.count, "The sections amount with a success block has to be the same as the table")
  }
  
  func testDisplayViewFailure() {
    // Given
    let error = NSError(domain: "Test", code: 0, userInfo: [:])
    let viewModel = BitcoinHistoryList.PrepareView.ViewModel(result: .failure(error))
    
    // When
    loadView()
    sut.displayView(viewModel: viewModel)
    
    // Then
    XCTAssert(sut.presentedViewController is UIAlertController, "After an error has happened, an alert controller must be presented")
  }
  
  func testIndexPathIsMantainedAfterUpdateAndDataIsPassedToDetailViewController() {
    // Given
    let sections: [BitconHistorySection] = [.today(detail: RateList.fake)]
    let viewModel = BitcoinHistoryList.PrepareView.ViewModel(result: .success(sections))
    let spy = BitcoinHistoryListRouterSpy()
    sut.router = spy

    // When
    sut.displayView(viewModel: viewModel)
    
    // Then
    if sut.traitCollection.horizontalSizeClass == .regular {
      XCTAssertEqual(sut.tableView.indexPathForSelectedRow, IndexPath(row: 0, section: 0))
      XCTAssert(spy.updateDataToBitcoinRateDetailIfPresentedCalled)
    } else {
      XCTAssertEqual(sut.tableView.indexPathForSelectedRow, nil)
      XCTAssertFalse(spy.updateDataToBitcoinRateDetailIfPresentedCalled)
    }
    
    // Given
    let sectionsUpdated: [BitconHistorySection] = [.today(detail: RateList.fake), .historic(list: RateList.fake)]
    let startListenViewModel = BitcoinHistoryList.StartUpdatingForPrice.ViewModel(result: .success(sectionsUpdated))
    
    // When
    sut.displayStartUpdatingTodayRate(viewModel: startListenViewModel)
    
    // Then
    if sut.traitCollection.horizontalSizeClass == .regular {
      XCTAssertEqual(sut.tableView.indexPathForSelectedRow, IndexPath(row: 0, section: 0))
    } else {
      XCTAssertEqual(sut.tableView.indexPathForSelectedRow, nil)
    }
  }
}
