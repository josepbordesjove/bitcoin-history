//
//  BitcoinPriceDetailInteractorTests.swift
//  bitcoin-history
//
//  Created by Josep Bordes Jové on 30/11/2019.
//  Copyright (c) 2019 Josep Bordes Jové. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import Bitcoin_History
import XCTest
import BHKit

class BitcoinPriceDetailInteractorTests: XCTestCase {
  // MARK: Subject under test
  
  var sut: BitcoinPriceDetailInteractor!
  
  // MARK: Test lifecycle
  
  override func setUp() {
    super.setUp()
    setupBitcoinPriceDetailInteractor()
  }
  
  override func tearDown() {
    super.tearDown()
    
    sut.dayRate = nil
    sut.historicRate = nil
  }
  
  // MARK: Test setup
  
  func setupBitcoinPriceDetailInteractor() {
    sut = BitcoinPriceDetailInteractor(store: MemStore())
  }
  
  // MARK: Test doubles
  
  class BitcoinPriceDetailPresentationLogicSpy: BitcoinPriceDetailPresentationLogic {
    var presentViewCalled = false
    
    func presentView(response: BitcoinPriceDetail.PrepareView.Response) {
      presentViewCalled = true
    }
  }
  
  // MARK: Tests
  
  func testPrepareViewSuccessFromToday() {
    // Given
    let spy = BitcoinPriceDetailPresentationLogicSpy()
    sut.presenter = spy
    sut.dayRate = RateList.fake
    let request = BitcoinPriceDetail.PrepareView.Request()
    
    // When
    sut.prepareView(request: request)
    
    // Then
    XCTAssertTrue(spy.presentViewCalled, "prepareView(request:) should ask the presenter to format the result with success result")
  }
  
  func testPrepareViewSuccessFromHistoric() {
    // Given
    let spy = BitcoinPriceDetailPresentationLogicSpy()
    sut.presenter = spy
    sut.historicRate = Rate.fake1
    let request = BitcoinPriceDetail.PrepareView.Request()
    
    // When
    sut.prepareView(request: request)
    
    // Then
    XCTAssertTrue(spy.presentViewCalled, "prepareView(request:) should ask the presenter to format the result with success result")
  }
  
  func testPrepareViewFailure() {
    // Given
    let spy = BitcoinPriceDetailPresentationLogicSpy()
    sut.presenter = spy
    let request = BitcoinPriceDetail.PrepareView.Request()
    
    // When
    sut.prepareView(request: request)
    
    // Then
    XCTAssertTrue(spy.presentViewCalled, "prepareView(request:) should ask the presenter to format the result with failure result")
  }
}
