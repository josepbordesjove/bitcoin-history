//
//  BitcoinPriceDetailViewControllerTests.swift
//  bitcoin-history
//
//  Created by Josep Bordes Jové on 30/11/2019.
//  Copyright (c) 2019 Josep Bordes Jové. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import Bitcoin_History
import XCTest
import BHKit
import BHUIKit

class BitcoinPriceDetailViewControllerTests: XCTestCase {
  // MARK: Subject under test
  
  var sut: BitcoinPriceDetailViewController!
  var window: UIWindow!
  
  // MARK: Test lifecycle
  
  override func setUp() {
    super.setUp()
    window = UIWindow()
    setupBitcoinPriceDetailViewController()
  }
  
  override func tearDown() {
    window = nil
    super.tearDown()
  }
  
  // MARK: Test setup
  
  func setupBitcoinPriceDetailViewController() {
    sut = BitcoinPriceDetailViewController(store: MemStore())
  }
  
  func loadView() {
    window.addSubview(sut.view)
    RunLoop.current.run(until: Date())
  }
  
  // MARK: Test doubles
  
  class BitcoinPriceDetailBusinessLogicSpy: BitcoinPriceDetailBusinessLogic {
    var prepareViewCalled = false
    
    func prepareView(request: BitcoinPriceDetail.PrepareView.Request) {
      prepareViewCalled = true
    }
  }
  
  // MARK: Tests
  
  func testShouldPrepareViewWhenViewIsLoaded() {
    // Given
    let spy = BitcoinPriceDetailBusinessLogicSpy()
    sut.interactor = spy
    
    // When
    loadView()
    
    // Then
    XCTAssertTrue(spy.prepareViewCalled, "viewDidLoad() should ask the interactor to do something")
  }
  
  func testDisplayViewSuccessAndProperlyUpdate() {
    // Given 1
    let rates = [Rate.fake, Rate.fake1]
    let viewModel = BitcoinPriceDetail.PrepareView.ViewModel(result: .success(rates))
    
    // When 1
    loadView()
    sut.displayView(viewModel: viewModel)
    
    // Then 1
    XCTAssertEqual(sut.tableViewHandler?.tableView?.numberOfRows(inSection: 0), rates.count)
    
    // Given 2
    let newRates = [Rate.fake, Rate.fake1, Rate.fake, Rate.fake1]
    let newViewModel = BitcoinPriceDetail.PrepareView.ViewModel(result: .success(newRates))
    
    // When 2
    loadView()
    sut.displayView(viewModel: newViewModel)
    
    // Then 2
    XCTAssertEqual(sut.tableViewHandler?.tableView?.numberOfRows(inSection: 0), newRates.count)
  }
  
  func testDisplayViewFailure() {
    // Given
    let error = NSError(domain: "TestError", code: 0, userInfo: [NSLocalizedDescriptionKey: "Test Error"])
    let viewModel = BitcoinPriceDetail.PrepareView.ViewModel(result: .failure(error))
    
    // When
    loadView()
    sut.displayView(viewModel: viewModel)
    
    // Then
    XCTAssertEqual(sut.placeholderView.titleLabel.text, NSLocalizedString("Something bad happened", comment: ""))
    XCTAssertEqual(sut.placeholderView.descriptionLabel.text, error.localizedDescription)
  }
  
  func testDisplayEmptySuccess() {
    // Given
    let viewModel = BitcoinPriceDetail.PrepareView.ViewModel(result: .success([]))
    
    // When
    loadView()
    sut.displayView(viewModel: viewModel)
    
    // Then
    XCTAssertEqual(sut.placeholderView.state, EmptyPlaceholderState.empty)
    XCTAssertTrue(sut.tableViewHandler?.tableView?.isHidden ?? false)
  }
}
