//
//  BitcoinHistoryListInteractor.swift
//  bitcoin-history
//
//  Created by Josep Bordes Jové on 27/11/2019.
//  Copyright (c) 2019 Josep Bordes Jové. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import BHKit

protocol BitcoinHistoryListBusinessLogic {
  func prepareView(request: BitcoinHistoryList.PrepareView.Request)
  func startUpdatingTodayRate(request: BitcoinHistoryList.StartUpdatingForPrice.Request)
  func stopUpdatingTodayRate(request: BitcoinHistoryList.StopUpdatingForPrice.Request)
  func forceUpdateTodaysRate(request: BitcoinHistoryList.ForceUpdateTodaysRate.Request)
}

protocol BitcoinHistoryListDataStore {
  var historicalList: RateList? { get set }
  var todayRate: RateList? { get set }
}

class BitcoinHistoryListInteractor: BitcoinHistoryListBusinessLogic, BitcoinHistoryListDataStore {
  struct Constants {
    static let refreshTodayRateInterval: Double = 60
    static let previousDaysToFetch: Int = 14
  }

  var presenter: BitcoinHistoryListPresentationLogic?
  var timer: Timer?
  let timeIntervalToRefresh: Double
  
  // MARK: Data store
  
  var historicalList: RateList?
  var todayRate: RateList?
  
  // MARK: Private vars
  
  var todaySection: BitconHistorySection?
  var historicSection: BitconHistorySection?
  var placeholderSection: BitconHistorySection?
  
  // MARK: Workers
  
  var worker: Worker
  
  // MARK: Object lifecycle
  
  init(store: StoreProtocol = Store(), refreshTodayRateInterval: Double = Constants.refreshTodayRateInterval) {
    timeIntervalToRefresh = refreshTodayRateInterval
    worker = Worker(store: store)
  }
  
  // MARK: Business logic
  
  func prepareView(request: BitcoinHistoryList.PrepareView.Request) {
    sections.append(.placeholder(amount: Constants.previousDaysToFetch))
    let response = BitcoinHistoryList.PrepareView.Response(result: .success(sections))
    self.presenter?.presentView(response: response)

    getHistoricalList { (result) in
      let response = BitcoinHistoryList.PrepareView.Response(result: result)
      self.presenter?.presentView(response: response)
    }
    
    getTodaysRate { (result) in
      let response = BitcoinHistoryList.PrepareView.Response(result: result)
      self.presenter?.presentView(response: response)
    }
  }
  
  func startUpdatingTodayRate(request: BitcoinHistoryList.StartUpdatingForPrice.Request) {
    worker.startListeningForTodayUpdates(timeIntervalToRefresh: timeIntervalToRefresh) { [weak self] (result) in
      switch result {
      case .success(let todayRate):
        self?.handleTodayRateSuccess(todayRate)
        if let unwrappedSections = self?.sections {
            let response = BitcoinHistoryList.StartUpdatingForPrice.Response(result: .success(unwrappedSections))
            self?.presenter?.presentStartUpdatingTodayRate(response: response)
        } else {
            // If self is not available, it does not make sense to continue
        }
      case .failure(let error):
        let response = BitcoinHistoryList.StartUpdatingForPrice.Response(result: .failure(error))
        self?.presenter?.presentStartUpdatingTodayRate(response: response)
      }
    }
  }
  
  func stopUpdatingTodayRate(request: BitcoinHistoryList.StopUpdatingForPrice.Request) {
    worker.stopListeningForTodayUpdates()
  }
  
  func forceUpdateTodaysRate(request: BitcoinHistoryList.ForceUpdateTodaysRate.Request) {
    getTodaysRate { (result) in
      let response = BitcoinHistoryList.ForceUpdateTodaysRate.Response(result: result)
      self.presenter?.presentForceUpdateTodaysRate(response: response)
    }
    
    getHistoricalList { (result) in
      let response = BitcoinHistoryList.ForceUpdateTodaysRate.Response(result: result)
      self.presenter?.presentForceUpdateTodaysRate(response: response)
    }
  }
  
  // MARK: Helpers
  
  private func getTodaysRate(completion: @escaping (Result<[BitconHistorySection], Error>) -> Void) {
    self.worker.getCurrentPrice { [weak self] (result) in
      switch result {
      case .success(let todayRate):
        self?.handleTodayRateSuccess(todayRate)
        if let sectionsUnwraped = self?.sections {
            completion(.success(sectionsUnwraped))
        } else {
            // If self is not available, it does not make sense to continue
            return
        }
      case .failure(let error):
        completion(.failure(error))
      }
    }
  }
  
  private func getHistoricalList(completion: @escaping (Result<[BitconHistorySection], Error>) -> Void) {
    let initialDate = Date(substractingDays: Constants.previousDaysToFetch)
    let finalDate = Date()

    worker.getHistorical(start: initialDate, end: finalDate) { [weak self] (result) in
      switch result {
      case .success(let historicalList):
        self?.handleHistoricalListSuccess(historicalList)
        if let sectionsUnwraped = self?.sections {
            completion(.success(sectionsUnwraped))
        } else {
            // If self is not available, it does not make sense to continue
            return
        }
      case .failure(let error):
        completion(.failure(error))
      }
    }
  }
  
  private func handleHistoricalListSuccess(_ historicalList: RateList) {
    if let index = sections.firstIndex(of: .historic(list: historicalList)) {
      self.sections[index] = .historic(list: historicalList)
    } else {
      self.sections.append(.historic(list: historicalList))
    }
    
    if let index = sections.indexOfPlaceholder {
      self.sections.remove(at: index)
      
      if sections.containsTodaySection {
        sections.append(.placeholder(amount: 1))
      }
    }
    
    self.historicalList = historicalList
  }
  
  private func handleTodayRateSuccess(_ todayRate: RateList) {
    if let index = sections.firstIndex(of: .today(detail: todayRate)) {
      sections[index] = .today(detail: todayRate)
    } else {
      sections.append(.today(detail: todayRate))
    }
    
    if let index = sections.firstIndex(of: .placeholder(amount: 1)) {
      self.sections.remove(at: index)
    }
    
    self.todayRate = todayRate
  }
}
