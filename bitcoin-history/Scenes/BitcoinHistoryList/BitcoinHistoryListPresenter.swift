//
//  BitcoinHistoryListPresenter.swift
//  bitcoin-history
//
//  Created by Josep Bordes Jové on 27/11/2019.
//  Copyright (c) 2019 Josep Bordes Jové. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol BitcoinHistoryListPresentationLogic {
  func presentView(response: BitcoinHistoryList.PrepareView.Response)
  func presentStartUpdatingTodayRate(response: BitcoinHistoryList.StartUpdatingForPrice.Response)
  func presentForceUpdateTodaysRate(response: BitcoinHistoryList.ForceUpdateTodaysRate.Response)
}

class BitcoinHistoryListPresenter: BitcoinHistoryListPresentationLogic {
  weak var viewController: BitcoinHistoryListDisplayLogic?
  
  func presentView(response: BitcoinHistoryList.PrepareView.Response) {
    switch response.result {
    case .success(let sections):
      let sortedSections = sections.sorted { $0.position < $1.position }
      let viewModel = BitcoinHistoryList.PrepareView.ViewModel(result: .success(sortedSections))
      viewController?.displayView(viewModel: viewModel)
    case .failure(let error):
      let viewModel = BitcoinHistoryList.PrepareView.ViewModel(result: .failure(error))
      viewController?.displayView(viewModel: viewModel)
    }
  }
  
  func presentStartUpdatingTodayRate(response: BitcoinHistoryList.StartUpdatingForPrice.Response) {
    switch response.result {
    case .success(let sections):
      let sortedSections = sections.sorted { $0.position < $1.position }
      let viewModel = BitcoinHistoryList.StartUpdatingForPrice.ViewModel(result: .success(sortedSections))
      viewController?.displayStartUpdatingTodayRate(viewModel: viewModel)
    case .failure(let error):
      let viewModel = BitcoinHistoryList.PrepareView.ViewModel(result: .failure(error))
      viewController?.displayView(viewModel: viewModel)
    }
  }
  
  func presentForceUpdateTodaysRate(response: BitcoinHistoryList.ForceUpdateTodaysRate.Response) {
    switch response.result {
    case .success(let sections):
      let sortedSections = sections.sorted { $0.position < $1.position }
      let viewModel = BitcoinHistoryList.ForceUpdateTodaysRate.ViewModel(result: .success(sortedSections))
      viewController?.displayForceUpdateTodaysRate(viewModel: viewModel)
    case .failure(let error):
      let viewModel = BitcoinHistoryList.PrepareView.ViewModel(result: .failure(error))
      viewController?.displayView(viewModel: viewModel)
    }
  }
}
