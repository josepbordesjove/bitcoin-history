//
//  BitcoinHistoryListViewController.swift
//  bitcoin-history
//
//  Created by Josep Bordes Jové on 27/11/2019.
//  Copyright (c) 2019 Josep Bordes Jové. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol BitcoinHistoryListDisplayLogic: class {
  func displayView(viewModel: BitcoinHistoryList.PrepareView.ViewModel)
}

class BitcoinHistoryListViewController: UITableViewController, BitcoinHistoryListDisplayLogic {
  var interactor: BitcoinHistoryListBusinessLogic?
  var router: (NSObjectProtocol & BitcoinHistoryListRoutingLogic & BitcoinHistoryListDataPassing)?
  var tableViewHandler: BitcoinHistoryTableHandler?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder) {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup() {
    let viewController = self
    let interactor = BitcoinHistoryListInteractor()
    let presenter = BitcoinHistoryListPresenter()
    let router = BitcoinHistoryListRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad() {
    super.viewDidLoad()
    
    setupView()
    prepareView()
  }
  
  // MARK: Setup methods
  
  private func setupView() {
    title = NSLocalizedString("Price history", comment: "This is the main title of the scene")
    navigationController?.navigationItem.largeTitleDisplayMode = .always
    navigationController?.navigationBar.prefersLargeTitles = true
  }
  
  // MARK: Prepare view
  
  func prepareView() {
    let request = BitcoinHistoryList.PrepareView.Request()
    interactor?.prepareView(request: request)
  }
  
  func displayView(viewModel: BitcoinHistoryList.PrepareView.ViewModel) {
    switch viewModel.result {
    case .success(let historicalList):
      if tableViewHandler == nil {
        tableViewHandler = BitcoinHistoryTableHandler(historicalList: historicalList, tableView: tableView)
      } else {
        tableViewHandler?.update(historicalList: historicalList)
      }
    case .failure(let error):
      // TODO: Show alert for error
      break
    }
  }
}
