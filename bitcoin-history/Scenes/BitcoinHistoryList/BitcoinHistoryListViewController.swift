//
//  BitcoinHistoryListViewController.swift
//  bitcoin-history
//
//  Created by Josep Bordes Jové on 27/11/2019.
//  Copyright (c) 2019 Josep Bordes Jové. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import BHUIKit
import BHKit

protocol BitcoinHistoryListDisplayLogic: class {
  func displayView(viewModel: BitcoinHistoryList.PrepareView.ViewModel)
  func displayStartUpdatingTodayRate(viewModel: BitcoinHistoryList.StartUpdatingForPrice.ViewModel)
  func displayForceUpdateTodaysRate(viewModel: BitcoinHistoryList.ForceUpdateTodaysRate.ViewModel)
}

class BitcoinHistoryListViewController: UITableViewController, BitcoinHistoryListDisplayLogic {
  var interactor: BitcoinHistoryListBusinessLogic?
  var router: (NSObjectProtocol & BitcoinHistoryListRoutingLogic & BitcoinHistoryListDataPassing)?
  var tableViewHandler: BitcoinHistoryTableHandler?
  
  // MARK: UI
  
  private lazy var refresher: UIRefreshControl = {
    let refreshControl = UIRefreshControl()
    refreshControl.addTarget(self, action: #selector(forceUpdateTodaysRate), for: .valueChanged)
    
    return refreshControl
  }()
  
  // MARK: Object lifecycle
  
  init(store: StoreProtocol) {
    super.init(nibName: nil, bundle: nil)
    setup(store: store)
  }
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder) {
    super.init(coder: aDecoder)
    setup()
  }
  
  deinit {
    stopUpdatingTodayRate()
  }
  
  // MARK: Setup
  
  private func setup(store: StoreProtocol = Store()) {
    let viewController = self
    let interactor = BitcoinHistoryListInteractor(store: store)
    let presenter = BitcoinHistoryListPresenter()
    let router = BitcoinHistoryListRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad() {
    super.viewDidLoad()
    
    setupView()
    setupNavigationItems()
    
    prepareView()
  }
  
  // MARK: Setup methods
  
  private func setupView() {
    title = NSLocalizedString("Price history", comment: "This is the main title of the scene")
    
    navigationController?.navigationItem.largeTitleDisplayMode = .always
    navigationController?.navigationBar.prefersLargeTitles = true
    
    tableView.tableFooterView = UIView()
    tableView.refreshControl = refresher
    
    view.backgroundColor = Color.background
  }
  
  private func setupNavigationItems() {
    let infoImage = Icon.info
    let infoButton = UIBarButtonItem(image: infoImage, style: .done, target: router, action: #selector(router?.routeToInfoDisclaimer))
    navigationItem.rightBarButtonItem = infoButton
  }
  
  // MARK: Prepare view
  
  @objc private func prepareView() {
    let request = BitcoinHistoryList.PrepareView.Request()
    interactor?.prepareView(request: request)
  }
  
  func displayView(viewModel: BitcoinHistoryList.PrepareView.ViewModel) {
    handleList(result: viewModel.result)
    startUpdatingTodayRate()
  }
  
  // MARK: Force to update today's rate
  
  @objc private func forceUpdateTodaysRate() {
    let request = BitcoinHistoryList.ForceUpdateTodaysRate.Request()
    interactor?.forceUpdateTodaysRate(request: request)
  }
  
  func displayForceUpdateTodaysRate(viewModel: BitcoinHistoryList.ForceUpdateTodaysRate.ViewModel) {
    handleList(result: viewModel.result)
    
    if refresher.isRefreshing {
      refresher.endRefreshing()
    }
  }
  
  // MARK: Start Updating today's rate
  
  private func startUpdatingTodayRate() {
    let request = BitcoinHistoryList.StartUpdatingForPrice.Request()
    interactor?.startUpdatingTodayRate(request: request)
  }
  
  func displayStartUpdatingTodayRate(viewModel: BitcoinHistoryList.StartUpdatingForPrice.ViewModel) {
    handleList(result: viewModel.result)
  }
  
  // MARK: Stop Updating today's rate
  
  private func stopUpdatingTodayRate() {
    let request = BitcoinHistoryList.StopUpdatingForPrice.Request()
    interactor?.stopUpdatingTodayRate(request: request)
  }
  
  // MARK: Helpers
  
  private func presentErrorDialog(error: Error) {
    guard !(presentedViewController is UIAlertController) else {
      return
    }
    
    let alertController = UIAlertController(
      title: NSLocalizedString("Something bad happened", comment: ""),
      message: error.localizedDescription,
      preferredStyle: .alert
    )
    
    let retryAction = UIAlertAction(title: NSLocalizedString("Retry", comment: ""), style: .default) { (_) in
      self.prepareView()
    }
    
    let cancelAction = UIAlertAction(title: NSLocalizedString("Cancel", comment: ""), style: .cancel) { (_) in
      // Handle cancel action if needed
    }
    
    [retryAction, cancelAction].forEach { alertController.addAction($0) }
    
    present(alertController, animated: true, completion: nil)
  }
  
  private func handleList(result: Result<[BitconHistorySection], Error>) {
    let currentSelectedIndex = tableView.indexPathForSelectedRow
    selectFirstIndexPathIfNeeded()

    switch result {
    case .success(let sections):
      if tableViewHandler == nil {
        tableViewHandler = BitcoinHistoryTableHandler(sections: sections, tableView: tableView)
        tableViewHandler?.delegate = self
      } else {
        tableViewHandler?.update(sections: sections)
      }
    case .failure(let error):
      presentErrorDialog(error: error)
    }
    
    if let currentSelectedIndex = currentSelectedIndex {
      tableView.selectRow(at: currentSelectedIndex, animated: false, scrollPosition: .none)
      
      // If selector row is at index 0 and row 0, it means that is the today rate, update it as it may have changed
      if currentSelectedIndex.section == 0 && currentSelectedIndex.row == 0 {
        router?.updateDataToBitcoinRateDetailIfPresented()
      }
    }
  }
  
  private func selectFirstIndexPathIfNeeded() {
    guard
      let rootController = UIApplication.shared.keyWindow?.rootViewController as? UISplitViewController,
      let sections = tableViewHandler?.sections,
      sections.containsTodaySection && tableView.indexPathForSelectedRow == nil && rootController.traitCollection.horizontalSizeClass == .regular
    else {
        return
    }
    
    let firstIndexPath = IndexPath(row: 0, section: 0)
    tableView.selectRow(at: firstIndexPath, animated: true, scrollPosition: .none)
    tableView.delegate?.tableView?(tableView, didSelectRowAt: firstIndexPath)
    
    if let cell = tableView.cellForRow(at: firstIndexPath) {
      cell.setSelected(true, animated: false)
    }
  }
}

// MARK: BitcoinHistoryTableHandlerDelegate

extension BitcoinHistoryListViewController: BitcoinHistoryTableHandlerDelegate {
  func didSelectRow(at indexPath: IndexPath) {
    router?.routeToBitcoinRateDetail()
  }
}
