//
//  BitcoinPriceDetailInteractor.swift
//  bitcoin-history
//
//  Created by Josep Bordes Jové on 27/11/2019.
//  Copyright (c) 2019 Josep Bordes Jové. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import BHKit

protocol BitcoinPriceDetailBusinessLogic {
  func prepareView(request: BitcoinPriceDetail.PrepareView.Request)
}

protocol BitcoinPriceDetailDataStore {
  var dayRate: PriceDetail? { get set }
  var date: Date? { get set }
}

class BitcoinPriceDetailInteractor: BitcoinPriceDetailBusinessLogic, BitcoinPriceDetailDataStore {
  var presenter: BitcoinPriceDetailPresentationLogic?
  
  // MARK: Data store
  
  var dayRate: PriceDetail?
  var date: Date?
  
  // MARK: Workers
  
  var worker = Worker(store: Store())
  
  // MARK: Business logic
  
  func prepareView(request: BitcoinPriceDetail.PrepareView.Request) {
    if let dayRate = dayRate {
      let response = BitcoinPriceDetail.PrepareView.Response(result: .success(dayRate.currencyDetails))
      presenter?.presentView(response: response)
    } else if let date = date {
      worker.getHistoricDetail(date: date) { (result) in
        switch result {
        case .success(let priceDetail):
          self.dayRate = priceDetail
          let response = BitcoinPriceDetail.PrepareView.Response(result: .success(priceDetail.currencyDetails))
          self.presenter?.presentView(response: response)
        case .failure(let error):
          let response = BitcoinPriceDetail.PrepareView.Response(result: .failure(error))
          self.presenter?.presentView(response: response)
        }
      }
    } else {
      // TODO: Handle this error
    }
  }
}
