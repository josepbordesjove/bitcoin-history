//
//  BitcoinPriceDetailViewController.swift
//  bitcoin-history
//
//  Created by Josep Bordes Jové on 27/11/2019.
//  Copyright (c) 2019 Josep Bordes Jové. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import BHUIKit
import BHKit

protocol BitcoinPriceDetailDisplayLogic: class {
  func displayView(viewModel: BitcoinPriceDetail.PrepareView.ViewModel)
}

class BitcoinPriceDetailViewController: UIViewController, BitcoinPriceDetailDisplayLogic {
  var interactor: BitcoinPriceDetailBusinessLogic?
  var router: (NSObjectProtocol & BitcoinPriceDetailRoutingLogic & BitcoinPriceDetailDataPassing)?
  var tableViewHandler: BitcoinPriceDetailTableHandler?
  
  // MARK: UI
  
  private lazy var tableView: UITableView = {
    let tableView = UITableView()
    tableView.translatesAutoresizingMaskIntoConstraints = false
    
    return tableView
  }()
  
  lazy var placeholderView: PlaceholderView = {
    var isDark: Bool = false
    
    if #available(iOS 12.0, *) {
      isDark = self.traitCollection.userInterfaceStyle == .dark
    }
    
    let view = PlaceholderView(state: .unknown, viewToHideWhenLoaded: tableView, isDarkMode: isDark)
    view.shouldDisplayCallToAction(true)
    view.setup(callToActionTitle: NSLocalizedString("Reload", comment: ""), callToAction: #selector(prepareView), target: self)
    view.translatesAutoresizingMaskIntoConstraints = false
    
    return view
  }()
  
  // MARK: Object lifecycle
  
  init(store: StoreProtocol) {
    super.init(nibName: nil, bundle: nil)
    setup(store: store)
  }
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder) {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup(store: StoreProtocol = Store()) {
    let viewController = self
    let interactor = BitcoinPriceDetailInteractor(store: store)
    let presenter = BitcoinPriceDetailPresenter()
    let router = BitcoinPriceDetailRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad() {
    super.viewDidLoad()
    
    setupView()
    setupConstraints()
    setupNavigationItems()
    
    prepareView()
  }
  
  // MARK: Setup methods
  
  private func setupNavigationItems() {
    let infoImage = Icon.info
    let infoButton = UIBarButtonItem(image: infoImage, style: .done, target: router, action: #selector(router?.routeToInfoDisclaimer))
    navigationItem.rightBarButtonItem = infoButton
  }
  
  private func setupView() {
    title = NSLocalizedString("Price detail", comment: "This is the main title of the scene")
    
    navigationItem.largeTitleDisplayMode = .always
    navigationController?.navigationBar.prefersLargeTitles = true
    
    tableView.tableFooterView = UIView()
    view.backgroundColor = Color.background
    
    [tableView, placeholderView].forEach { view.addSubview($0) }
  }
  
  private func setupConstraints() {
    NSLayoutConstraint.activate([
      tableView.topAnchor.constraint(equalTo: view.topAnchor),
      tableView.leftAnchor.constraint(equalTo: view.leftAnchor),
      tableView.rightAnchor.constraint(equalTo: view.rightAnchor),
      tableView.bottomAnchor.constraint(equalTo: view.bottomAnchor),
      
      placeholderView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),
      placeholderView.leftAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leftAnchor),
      placeholderView.rightAnchor.constraint(equalTo: view.safeAreaLayoutGuide.rightAnchor),
      placeholderView.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor)
    ])
  }
  
  // MARK: Prepare view
  
  @objc public func prepareView() {
    let request = BitcoinPriceDetail.PrepareView.Request()
    interactor?.prepareView(request: request)
    
    if router?.dataStore?.dayRate == nil {
      placeholderView.set(state: .loading(image: Asset.bitcoinGrowth))
    }
  }
  
  func displayView(viewModel: BitcoinPriceDetail.PrepareView.ViewModel) {
    switch viewModel.result {
    case .success(let currencyDetails):
      if tableViewHandler == nil {
        tableViewHandler = BitcoinPriceDetailTableHandler(currencyDetails: currencyDetails, tableView: tableView)
      } else {
        tableViewHandler?.update(currencyDetails: currencyDetails)
      }
      
      self.placeholderView.set(state: currencyDetails.count > 0 ? .loaded : .empty)
    case .failure(let error):
      placeholderView.set(state: .error(error: error))
    }
  }
}
